{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "IXVbxk8yMcrD",
        "jRe0PhQ5SHlO",
        "qe9BuEbTAKKt",
        "9k5-033iobRL"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Effects of Alcohol on Student Performance**\n",
        "\n",
        "The dataset “Effects of Alcohol on Student performance” is derived from a study with the same name, conducted by Joshua Naudé and Jordan Bendam, on how alcohol influences the academic performances of students from the Stellenbosch University in South Africa. The survey included factors relating to the students’ grade, year, college, monthly allowance, study duration, and many more. It also includes questions related to their alcohol consumption such as how many drinks they consume and how many classes they miss per week because of it (Naudé, 2024).\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "tvvOHC2VoZTO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **The Dataset**"
      ],
      "metadata": {
        "id": "geFDoGJKKZZ_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In order to gather the necessary data, Naudé and Bendam created a survey composed of 16 questions related to socioeconomic factors, lifestyle choices, and any external support systems using Google Forms, to which it was distributed to the different online chat forums within the student body, garnering a total of 600+ student responses. Upon removing null data and renaming variables, the dataset decreased to 404 observations.\n",
        "\n",
        "Each row in the dataset represents the individual student’s response to the questions given in the survey. For example, the first row contains the information of a 2nd Year Female student under the Arts & Social Sciences faculty, the second row containing the information about a male 2nd Year student who is under the Economic & Management Sciences faculty, and so on.\n",
        "\n",
        "Each column, on the other hand, corresponds to the variable or attribute related to socioeconomic factors, lifestyle choices, and external support systems that affect the students’ performance.\n",
        "\n",
        "- **`Sex`**: The biological identity of the student\n",
        "- **`Matric_Avg`**: The student’s matric average\n",
        "- **`Study_Year`**: The student’s current year\n",
        "- **`Faculty`**: The college or faculty the student’s degree is under\n",
        "- **`Accom_Status`**: The student’s accommodation status (private/within the university)\n",
        "- **`Monthly_Allowance`**: The monthly allowance the student receives, in Rands currency\n",
        "- **`Scholarship`**: Whether the student has a scholarship or not\n",
        "- **`Wkly_Stdy_Hrs`**: The amount of time in hours the student spends studying per week\n",
        "- **`Socializing_Freq`**: How often does the student go to social gatherings\n",
        "- **`Drinks_per_Night`**: How much alcohol the student consumes when going out\n",
        "- **`Missed_Classes`**: The number of classes a student misses per week due to alcohol reasons (hangovers, etc.)\n",
        "- **`Failed_Modules`**: How many modules a student has failed\n",
        "- **`Relationship`**: Whether the student is in a romantic relationship or not\n",
        "- **`Approval`**: Whether or not the student has obtained permission from their parent/s to consume alcohol\n",
        "- **`Parent_Strength`**: How close the student’s relationship with their parent/s is.\n",
        "\n",
        "The dataset also included the timestamp of when the student answered the survey.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "NbZD-B0IsHvQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Importing Libraries**\n",
        "\n",
        "The following are the imported libraries used in the dataset.\n",
        "- **`numpy`**: Used to manage arrays and perform certain operations on them (W3Schools.com, n.d.).\n",
        "- **`pandas`**: Used for data analysis and data manipulation (Suhani, 2020).\n",
        "- **`scipy.stats`**: Used for probability distribution and statistical operations (GeeksforGeeks, 2023).\n",
        "- **`seaborn`**: Used to visualize graphs in Python (GeeksforGeeks, 2023b)."
      ],
      "metadata": {
        "id": "d5xPjHCiPvtW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import chi2_contingency\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "toJ_lhqtPjb9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3b0SN-O7YgaD",
        "outputId": "cbb26777-1ab6-454a-9a58-96eeb986c7c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "stats_df = pd.read_csv(\"/content/drive/MyDrive/Stats survey.csv\")"
      ],
      "metadata": {
        "id": "dEKQk3DuQOYI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "stats_df.info()"
      ],
      "metadata": {
        "id": "acEaUPKZQzUH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9e51b6b-8330-4a8c-82f0-6106cef05185"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 406 entries, 0 to 405\n",
            "Data columns (total 17 columns):\n",
            " #   Column                                                                                             Non-Null Count  Dtype  \n",
            "---  ------                                                                                             --------------  -----  \n",
            " 0   Timestamp                                                                                          406 non-null    object \n",
            " 1   Your Sex?                                                                                          404 non-null    object \n",
            " 2   Your Matric (grade 12) Average/ GPA (in %)                                                         399 non-null    float64\n",
            " 3   What year were you in last year (2023) ?                                                           333 non-null    object \n",
            " 4   What faculty does your degree fall under?                                                          399 non-null    object \n",
            " 5   Your 2023 academic year average/GPA in % (Ignore if you are 2024 1st year student)                 320 non-null    float64\n",
            " 6   Your Accommodation Status Last Year (2023)                                                         383 non-null    object \n",
            " 7   Monthly Allowance in 2023                                                                          375 non-null    object \n",
            " 8   Were you on scholarship/bursary in 2023?                                                           398 non-null    object \n",
            " 9   Additional amount of studying (in hrs) per week                                                    403 non-null    object \n",
            " 10  How often do you go out partying/socialising during the week?                                      404 non-null    object \n",
            " 11  On a night out, how many alcoholic drinks do you consume?                                          404 non-null    object \n",
            " 12  How many classes do you miss per week due to alcohol reasons, (i.e: being hungover or too tired?)  403 non-null    object \n",
            " 13  How many modules have you failed thus far into your studies?                                       403 non-null    object \n",
            " 14  Are you currently in a romantic relationship?                                                      403 non-null    object \n",
            " 15  Do your parents approve alcohol consumption?                                                       402 non-null    object \n",
            " 16  How strong is your relationship with your parent/s?                                                403 non-null    object \n",
            "dtypes: float64(2), object(15)\n",
            "memory usage: 54.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Renaming variables\n",
        "stats_df = stats_df.rename(columns={\n",
        " \"Timestamp\" : \"Timestamp\",\n",
        " \"Your Sex?\" : \"Sex\",\n",
        " \"Your Matric (grade 12) Average/ GPA (in %)\" : \"Matric_Avg\",\n",
        " \"What year were you in last year (2023) ?\" : \"Study_Year\",\n",
        " \"What faculty does your degree fall under?\" : \"Faculty\",\n",
        " \"Your 2023 academic year average/GPA in % (Ignore if you are 2024 1st year student)\" : \"GPA\",\n",
        " \"Your Accommodation Status Last Year (2023)\" : \"Accom_Status\",\n",
        " \"Monthly Allowance in 2023\" : \"Monthly_Allowance\",\n",
        " \"Were you on scholarship/bursary in 2023?\" : \"Scholarship\",\n",
        " \"Additional amount of studying (in hrs) per week\" : \"Wkly_Stdy_Hrs\",\n",
        " \"How often do you go out partying/socialising during the week? \" : \"Socializing_Freq\",\n",
        " \"On a night out, how many alcoholic drinks do you consume?\" : \"Drinks_per_Night\",\n",
        " \"How many classes do you miss per week due to alcohol reasons, (i.e: being hungover or too tired?)\" : \"Missed_Classes\",\n",
        " \"How many modules have you failed thus far into your studies?\" : \"Failed_Modules\",\n",
        " \"Are you currently in a romantic relationship?\" : \"Relationship\",\n",
        " \"Do your parents approve alcohol consumption?\" : \"Approval\",\n",
        " \"How strong is your relationship with your parent/s?\" : \"Parent_Strength\"\n",
        "})\n",
        "\n",
        "stats_df.info()\n"
      ],
      "metadata": {
        "id": "KbcJHFzAcSG7",
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d79e28ca-47b1-4774-b3c0-ac526e13034d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 406 entries, 0 to 405\n",
            "Data columns (total 17 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Timestamp          406 non-null    object \n",
            " 1   Sex                404 non-null    object \n",
            " 2   Matric_Avg         399 non-null    float64\n",
            " 3   Study_Year         333 non-null    object \n",
            " 4   Faculty            399 non-null    object \n",
            " 5   GPA                320 non-null    float64\n",
            " 6   Accom_Status       383 non-null    object \n",
            " 7   Monthly_Allowance  375 non-null    object \n",
            " 8   Scholarship        398 non-null    object \n",
            " 9   Wkly_Stdy_Hrs      403 non-null    object \n",
            " 10  Socializing_Freq   404 non-null    object \n",
            " 11  Drinks_per_Night   404 non-null    object \n",
            " 12  Missed_Classes     403 non-null    object \n",
            " 13  Failed_Modules     403 non-null    object \n",
            " 14  Relationship       403 non-null    object \n",
            " 15  Approval           402 non-null    object \n",
            " 16  Parent_Strength    403 non-null    object \n",
            "dtypes: float64(2), object(15)\n",
            "memory usage: 54.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Cleaning**\n",
        "\n",
        "This section of the notebook performs data cleaning methods to remove inconsistencies, missing or duplicate values, and others that may cause problems during the analysis process."
      ],
      "metadata": {
        "id": "uh09gAw1PWTR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nan_counts = stats_df.isna().sum(axis=0)\n",
        "print(nan_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fSuRxiLuV4HW",
        "outputId": "5ec7b6a9-25b6-4c27-8327-31df5152aa94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Timestamp             0\n",
            "Sex                   2\n",
            "Matric_Avg            7\n",
            "Study_Year           73\n",
            "Faculty               7\n",
            "GPA                  86\n",
            "Accom_Status         23\n",
            "Monthly_Allowance    31\n",
            "Scholarship           8\n",
            "Wkly_Stdy_Hrs         3\n",
            "Socializing_Freq      2\n",
            "Drinks_per_Night      2\n",
            "Missed_Classes        3\n",
            "Failed_Modules        3\n",
            "Relationship          3\n",
            "Approval              4\n",
            "Parent_Strength       3\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are 109 entries with NaN values. We can drop observations with NaN values in the following variables:\n",
        "`Sex`, `Matric_Avg`, `Faculty`, `Scholarship`, `Wkly_Stdy_Hrs`, `Socializing_Freq`, `Drinks_per_Night`, `Missed_Classes`, `Failed_Modules`, `Relationship`, `Approval`, and `Parent_Strength`"
      ],
      "metadata": {
        "id": "8ydx2gs5ZzLc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# `Sex`, `Matric_Avg`, `Faculty`, `Scholarship`, `Wkly_Stdy_Hrs`, `Socializing_Freq`, `Drinks_per_Night`, `Missed_Classes`, `Failed_Modules`, `Relationship`, `Approval`, and `Parent_Strength`\n",
        "\n",
        "stats_df = stats_df.dropna(subset=[\"Sex\", \"Matric_Avg\", \"Faculty\", \"Scholarship\", \"Wkly_Stdy_Hrs\", \"Socializing_Freq\", \"Drinks_per_Night\", \"Missed_Classes\", \"Failed_Modules\", \"Relationship\", \"Approval\", \"Parent_Strength\"])\n"
      ],
      "metadata": {
        "id": "4f0EnK82cNL2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nan_counts = stats_df.isna().sum(axis=0)\n",
        "print(nan_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Q6Q7Bcog9Db",
        "outputId": "93bfaf29-1986-4c53-f11c-19c864feeaca",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Timestamp             0\n",
            "Sex                   0\n",
            "Matric_Avg            0\n",
            "Study_Year           61\n",
            "Faculty               0\n",
            "GPA                  71\n",
            "Accom_Status         14\n",
            "Monthly_Allowance    23\n",
            "Scholarship           0\n",
            "Wkly_Stdy_Hrs         0\n",
            "Socializing_Freq      0\n",
            "Drinks_per_Night      0\n",
            "Missed_Classes        0\n",
            "Failed_Modules        0\n",
            "Relationship          0\n",
            "Approval              0\n",
            "Parent_Strength       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for column in stats_df.columns:\n",
        "  unique_values = stats_df[column].unique()\n",
        "  print(f\"Unique values for '{column}': {unique_values}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9GUOeHMhNJk",
        "outputId": "ad5cf8ec-d56b-4ed8-f922-ec6ab437ab08",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique values for 'Timestamp': ['2024/03/07 5:12:01 pm EET' '2024/03/07 5:12:08 pm EET'\n",
            " '2024/03/07 5:12:25 pm EET' '2024/03/07 5:12:28 pm EET'\n",
            " '2024/03/07 5:13:00 pm EET' '2024/03/07 5:13:18 pm EET'\n",
            " '2024/03/07 5:13:22 pm EET' '2024/03/07 5:13:26 pm EET'\n",
            " '2024/03/07 5:13:35 pm EET' '2024/03/07 5:14:04 pm EET'\n",
            " '2024/03/07 5:14:06 pm EET' '2024/03/07 5:14:08 pm EET'\n",
            " '2024/03/07 5:14:10 pm EET' '2024/03/07 5:14:43 pm EET'\n",
            " '2024/03/07 5:14:50 pm EET' '2024/03/07 5:14:51 pm EET'\n",
            " '2024/03/07 5:15:05 pm EET' '2024/03/07 5:15:08 pm EET'\n",
            " '2024/03/07 5:15:13 pm EET' '2024/03/07 5:15:43 pm EET'\n",
            " '2024/03/07 5:15:47 pm EET' '2024/03/07 5:16:06 pm EET'\n",
            " '2024/03/07 5:16:35 pm EET' '2024/03/07 5:16:56 pm EET'\n",
            " '2024/03/07 5:17:06 pm EET' '2024/03/07 5:17:09 pm EET'\n",
            " '2024/03/07 5:17:22 pm EET' '2024/03/07 5:17:28 pm EET'\n",
            " '2024/03/07 5:17:39 pm EET' '2024/03/07 5:18:18 pm EET'\n",
            " '2024/03/07 5:18:41 pm EET' '2024/03/07 5:18:56 pm EET'\n",
            " '2024/03/07 5:19:16 pm EET' '2024/03/07 5:19:55 pm EET'\n",
            " '2024/03/07 5:19:56 pm EET' '2024/03/07 5:20:04 pm EET'\n",
            " '2024/03/07 5:20:31 pm EET' '2024/03/07 5:20:48 pm EET'\n",
            " '2024/03/07 5:20:52 pm EET' '2024/03/07 5:20:55 pm EET'\n",
            " '2024/03/07 5:20:57 pm EET' '2024/03/07 5:21:41 pm EET'\n",
            " '2024/03/07 5:22:13 pm EET' '2024/03/07 5:22:34 pm EET'\n",
            " '2024/03/07 5:22:36 pm EET' '2024/03/07 5:22:40 pm EET'\n",
            " '2024/03/07 5:22:44 pm EET' '2024/03/07 5:22:59 pm EET'\n",
            " '2024/03/07 5:23:11 pm EET' '2024/03/07 5:23:15 pm EET'\n",
            " '2024/03/07 5:24:22 pm EET' '2024/03/07 5:24:55 pm EET'\n",
            " '2024/03/07 5:25:13 pm EET' '2024/03/07 5:26:08 pm EET'\n",
            " '2024/03/07 5:26:12 pm EET' '2024/03/07 5:26:29 pm EET'\n",
            " '2024/03/07 5:28:19 pm EET' '2024/03/07 5:28:30 pm EET'\n",
            " '2024/03/07 5:30:10 pm EET' '2024/03/07 5:30:18 pm EET'\n",
            " '2024/03/07 5:31:19 pm EET' '2024/03/07 5:31:56 pm EET'\n",
            " '2024/03/07 5:35:49 pm EET' '2024/03/07 5:36:14 pm EET'\n",
            " '2024/03/07 5:36:45 pm EET' '2024/03/07 5:37:16 pm EET'\n",
            " '2024/03/07 5:37:18 pm EET' '2024/03/07 5:39:13 pm EET'\n",
            " '2024/03/07 5:39:33 pm EET' '2024/03/07 5:41:22 pm EET'\n",
            " '2024/03/07 5:41:41 pm EET' '2024/03/07 5:43:23 pm EET'\n",
            " '2024/03/07 5:43:30 pm EET' '2024/03/07 5:45:25 pm EET'\n",
            " '2024/03/07 5:46:41 pm EET' '2024/03/07 5:46:44 pm EET'\n",
            " '2024/03/07 5:47:22 pm EET' '2024/03/07 5:48:23 pm EET'\n",
            " '2024/03/07 5:48:53 pm EET' '2024/03/07 5:49:47 pm EET'\n",
            " '2024/03/07 5:50:14 pm EET' '2024/03/07 5:50:23 pm EET'\n",
            " '2024/03/07 5:51:04 pm EET' '2024/03/07 5:51:05 pm EET'\n",
            " '2024/03/07 5:54:33 pm EET' '2024/03/07 5:54:41 pm EET'\n",
            " '2024/03/07 5:54:53 pm EET' '2024/03/07 5:55:01 pm EET'\n",
            " '2024/03/07 5:55:23 pm EET' '2024/03/07 5:55:49 pm EET'\n",
            " '2024/03/07 5:57:46 pm EET' '2024/03/07 5:58:30 pm EET'\n",
            " '2024/03/07 5:59:04 pm EET' '2024/03/07 5:59:28 pm EET'\n",
            " '2024/03/07 5:59:33 pm EET' '2024/03/07 6:00:19 pm EET'\n",
            " '2024/03/07 6:00:33 pm EET' '2024/03/07 6:00:45 pm EET'\n",
            " '2024/03/07 6:01:01 pm EET' '2024/03/07 6:02:13 pm EET'\n",
            " '2024/03/07 6:03:28 pm EET' '2024/03/07 6:03:46 pm EET'\n",
            " '2024/03/07 6:04:29 pm EET' '2024/03/07 6:04:36 pm EET'\n",
            " '2024/03/07 6:04:52 pm EET' '2024/03/07 6:05:33 pm EET'\n",
            " '2024/03/07 6:05:57 pm EET' '2024/03/07 6:06:00 pm EET'\n",
            " '2024/03/07 6:06:21 pm EET' '2024/03/07 6:07:35 pm EET'\n",
            " '2024/03/07 6:08:05 pm EET' '2024/03/07 6:08:50 pm EET'\n",
            " '2024/03/07 6:10:05 pm EET' '2024/03/07 6:11:08 pm EET'\n",
            " '2024/03/07 6:11:14 pm EET' '2024/03/07 6:11:21 pm EET'\n",
            " '2024/03/07 6:11:41 pm EET' '2024/03/07 6:12:43 pm EET'\n",
            " '2024/03/07 6:12:47 pm EET' '2024/03/07 6:15:14 pm EET'\n",
            " '2024/03/07 6:15:31 pm EET' '2024/03/07 6:15:48 pm EET'\n",
            " '2024/03/07 6:16:12 pm EET' '2024/03/07 6:16:51 pm EET'\n",
            " '2024/03/07 6:19:15 pm EET' '2024/03/07 6:23:51 pm EET'\n",
            " '2024/03/07 6:23:58 pm EET' '2024/03/07 6:25:59 pm EET'\n",
            " '2024/03/07 6:26:53 pm EET' '2024/03/07 6:27:21 pm EET'\n",
            " '2024/03/07 6:28:20 pm EET' '2024/03/07 6:28:39 pm EET'\n",
            " '2024/03/07 6:33:23 pm EET' '2024/03/07 6:34:12 pm EET'\n",
            " '2024/03/07 6:34:17 pm EET' '2024/03/07 6:37:49 pm EET'\n",
            " '2024/03/07 6:39:00 pm EET' '2024/03/07 6:42:55 pm EET'\n",
            " '2024/03/07 6:43:25 pm EET' '2024/03/07 6:44:27 pm EET'\n",
            " '2024/03/07 6:46:11 pm EET' '2024/03/07 6:56:36 pm EET'\n",
            " '2024/03/07 6:56:38 pm EET' '2024/03/07 6:59:23 pm EET'\n",
            " '2024/03/07 7:02:56 pm EET' '2024/03/07 7:03:36 pm EET'\n",
            " '2024/03/07 7:07:32 pm EET' '2024/03/07 7:09:17 pm EET'\n",
            " '2024/03/07 7:12:26 pm EET' '2024/03/07 7:14:33 pm EET'\n",
            " '2024/03/07 7:15:06 pm EET' '2024/03/07 7:18:00 pm EET'\n",
            " '2024/03/07 7:18:59 pm EET' '2024/03/07 7:19:12 pm EET'\n",
            " '2024/03/07 7:21:59 pm EET' '2024/03/07 7:23:00 pm EET'\n",
            " '2024/03/07 7:33:31 pm EET' '2024/03/07 7:35:56 pm EET'\n",
            " '2024/03/07 7:41:48 pm EET' '2024/03/07 7:45:38 pm EET'\n",
            " '2024/03/07 7:53:26 pm EET' '2024/03/07 7:53:39 pm EET'\n",
            " '2024/03/07 7:54:01 pm EET' '2024/03/07 7:54:43 pm EET'\n",
            " '2024/03/07 7:54:47 pm EET' '2024/03/07 7:54:54 pm EET'\n",
            " '2024/03/07 7:55:07 pm EET' '2024/03/07 7:55:47 pm EET'\n",
            " '2024/03/07 8:06:35 pm EET' '2024/03/07 8:07:03 pm EET'\n",
            " '2024/03/07 8:07:15 pm EET' '2024/03/07 8:10:53 pm EET'\n",
            " '2024/03/07 8:11:46 pm EET' '2024/03/07 8:13:02 pm EET'\n",
            " '2024/03/07 8:14:46 pm EET' '2024/03/07 8:16:42 pm EET'\n",
            " '2024/03/07 8:17:11 pm EET' '2024/03/07 8:21:30 pm EET'\n",
            " '2024/03/07 8:23:39 pm EET' '2024/03/07 8:25:15 pm EET'\n",
            " '2024/03/07 8:25:17 pm EET' '2024/03/07 8:25:25 pm EET'\n",
            " '2024/03/07 8:31:09 pm EET' '2024/03/07 8:35:19 pm EET'\n",
            " '2024/03/07 8:41:19 pm EET' '2024/03/07 8:44:24 pm EET'\n",
            " '2024/03/07 8:52:04 pm EET' '2024/03/07 8:54:01 pm EET'\n",
            " '2024/03/07 8:55:37 pm EET' '2024/03/07 8:55:40 pm EET'\n",
            " '2024/03/07 8:55:47 pm EET' '2024/03/07 8:56:01 pm EET'\n",
            " '2024/03/07 8:57:08 pm EET' '2024/03/07 8:57:17 pm EET'\n",
            " '2024/03/07 8:57:29 pm EET' '2024/03/07 8:57:39 pm EET'\n",
            " '2024/03/07 8:58:08 pm EET' '2024/03/07 9:01:08 pm EET'\n",
            " '2024/03/07 9:03:43 pm EET' '2024/03/07 9:05:14 pm EET'\n",
            " '2024/03/07 9:05:47 pm EET' '2024/03/07 9:07:53 pm EET'\n",
            " '2024/03/07 9:09:03 pm EET' '2024/03/07 9:11:04 pm EET'\n",
            " '2024/03/07 9:11:21 pm EET' '2024/03/07 9:12:49 pm EET'\n",
            " '2024/03/07 9:14:18 pm EET' '2024/03/07 9:14:19 pm EET'\n",
            " '2024/03/07 9:14:34 pm EET' '2024/03/07 9:16:56 pm EET'\n",
            " '2024/03/07 9:18:49 pm EET' '2024/03/07 9:24:34 pm EET'\n",
            " '2024/03/07 9:25:57 pm EET' '2024/03/07 9:27:52 pm EET'\n",
            " '2024/03/07 9:27:53 pm EET' '2024/03/07 9:32:42 pm EET'\n",
            " '2024/03/07 9:40:47 pm EET' '2024/03/07 9:44:28 pm EET'\n",
            " '2024/03/07 9:55:22 pm EET' '2024/03/07 9:56:16 pm EET'\n",
            " '2024/03/07 9:59:38 pm EET' '2024/03/07 10:07:26 pm EET'\n",
            " '2024/03/07 10:07:30 pm EET' '2024/03/07 10:08:29 pm EET'\n",
            " '2024/03/07 10:17:06 pm EET' '2024/03/07 10:19:09 pm EET'\n",
            " '2024/03/07 10:20:49 pm EET' '2024/03/07 10:25:16 pm EET'\n",
            " '2024/03/07 10:25:45 pm EET' '2024/03/07 10:28:49 pm EET'\n",
            " '2024/03/07 10:31:42 pm EET' '2024/03/07 10:31:47 pm EET'\n",
            " '2024/03/07 10:46:19 pm EET' '2024/03/07 10:53:04 pm EET'\n",
            " '2024/03/07 10:53:09 pm EET' '2024/03/07 11:13:49 pm EET'\n",
            " '2024/03/07 11:18:02 pm EET' '2024/03/07 11:19:26 pm EET'\n",
            " '2024/03/07 11:19:53 pm EET' '2024/03/07 11:19:54 pm EET'\n",
            " '2024/03/07 11:20:06 pm EET' '2024/03/07 11:20:18 pm EET'\n",
            " '2024/03/07 11:20:21 pm EET' '2024/03/07 11:20:23 pm EET'\n",
            " '2024/03/07 11:20:59 pm EET' '2024/03/07 11:21:23 pm EET'\n",
            " '2024/03/07 11:22:41 pm EET' '2024/03/07 11:23:21 pm EET'\n",
            " '2024/03/07 11:25:48 pm EET' '2024/03/07 11:27:13 pm EET'\n",
            " '2024/03/07 11:30:11 pm EET' '2024/03/07 11:30:21 pm EET'\n",
            " '2024/03/07 11:31:34 pm EET' '2024/03/07 11:35:55 pm EET'\n",
            " '2024/03/07 11:37:28 pm EET' '2024/03/07 11:37:29 pm EET'\n",
            " '2024/03/07 11:42:16 pm EET' '2024/03/07 11:43:48 pm EET'\n",
            " '2024/03/07 11:46:09 pm EET' '2024/03/07 11:48:05 pm EET'\n",
            " '2024/03/07 11:56:04 pm EET' '2024/03/07 11:57:33 pm EET'\n",
            " '2024/03/08 12:00:27 am EET' '2024/03/08 12:25:41 am EET'\n",
            " '2024/03/08 1:55:49 am EET' '2024/03/08 4:50:24 am EET'\n",
            " '2024/03/08 5:47:58 am EET' '2024/03/08 6:30:51 am EET'\n",
            " '2024/03/08 6:32:27 am EET' '2024/03/08 6:56:49 am EET'\n",
            " '2024/03/08 7:08:19 am EET' '2024/03/08 7:18:34 am EET'\n",
            " '2024/03/08 7:28:55 am EET' '2024/03/08 7:39:45 am EET'\n",
            " '2024/03/08 8:07:23 am EET' '2024/03/08 8:11:39 am EET'\n",
            " '2024/03/08 8:27:36 am EET' '2024/03/08 8:31:40 am EET'\n",
            " '2024/03/08 8:34:42 am EET' '2024/03/08 8:35:05 am EET'\n",
            " '2024/03/08 8:47:37 am EET' '2024/03/08 8:58:27 am EET'\n",
            " '2024/03/08 9:12:18 am EET' '2024/03/08 9:15:32 am EET'\n",
            " '2024/03/08 9:19:29 am EET' '2024/03/08 9:30:31 am EET'\n",
            " '2024/03/08 9:41:55 am EET' '2024/03/08 9:50:48 am EET'\n",
            " '2024/03/08 10:01:13 am EET' '2024/03/08 10:06:03 am EET'\n",
            " '2024/03/08 10:15:05 am EET' '2024/03/08 10:32:14 am EET'\n",
            " '2024/03/08 10:45:42 am EET' '2024/03/08 10:52:45 am EET'\n",
            " '2024/03/08 10:54:38 am EET' '2024/03/08 11:03:19 am EET'\n",
            " '2024/03/08 11:20:55 am EET' '2024/03/08 11:30:52 am EET'\n",
            " '2024/03/08 11:46:01 am EET' '2024/03/08 12:28:48 pm EET'\n",
            " '2024/03/08 12:54:48 pm EET' '2024/03/08 1:07:58 pm EET'\n",
            " '2024/03/08 1:34:30 pm EET' '2024/03/08 2:08:49 pm EET'\n",
            " '2024/03/08 2:25:01 pm EET' '2024/03/08 2:45:33 pm EET'\n",
            " '2024/03/08 3:06:40 pm EET' '2024/03/08 3:32:58 pm EET'\n",
            " '2024/03/08 4:16:40 pm EET' '2024/03/08 4:29:09 pm EET'\n",
            " '2024/03/08 4:33:50 pm EET' '2024/03/08 4:34:38 pm EET'\n",
            " '2024/03/08 4:35:19 pm EET' '2024/03/08 4:37:51 pm EET'\n",
            " '2024/03/08 4:38:33 pm EET' '2024/03/08 4:39:53 pm EET'\n",
            " '2024/03/08 4:40:34 pm EET' '2024/03/08 6:43:44 pm EET'\n",
            " '2024/03/08 6:54:05 pm EET' '2024/03/08 7:10:07 pm EET'\n",
            " '2024/03/08 9:37:48 pm EET' '2024/03/09 9:53:21 am EET'\n",
            " '2024/03/09 12:11:10 pm EET' '2024/03/09 12:35:28 pm EET'\n",
            " '2024/03/09 3:12:44 pm EET' '2024/03/09 4:31:38 pm EET'\n",
            " '2024/03/09 4:41:44 pm EET' '2024/03/09 9:57:06 pm EET'\n",
            " '2024/03/10 12:56:37 pm EET' '2024/03/10 12:58:47 pm EET'\n",
            " '2024/03/10 1:02:07 pm EET' '2024/03/10 2:48:41 pm EET'\n",
            " '2024/03/10 6:14:48 pm EET' '2024/03/10 8:03:18 pm EET'\n",
            " '2024/03/10 8:08:34 pm EET' '2024/03/10 11:07:34 pm EET'\n",
            " '2024/03/11 1:03:10 pm EET' '2024/03/11 2:06:31 pm EET'\n",
            " '2024/03/11 2:06:41 pm EET' '2024/03/11 2:06:54 pm EET'\n",
            " '2024/03/11 2:06:55 pm EET' '2024/03/11 2:07:05 pm EET'\n",
            " '2024/03/11 2:07:20 pm EET' '2024/03/11 2:07:27 pm EET'\n",
            " '2024/03/11 2:07:33 pm EET' '2024/03/11 2:07:35 pm EET'\n",
            " '2024/03/11 2:07:50 pm EET' '2024/03/11 2:09:11 pm EET'\n",
            " '2024/03/11 2:09:53 pm EET' '2024/03/11 2:09:56 pm EET'\n",
            " '2024/03/11 2:10:29 pm EET' '2024/03/11 2:11:49 pm EET'\n",
            " '2024/03/11 2:13:26 pm EET' '2024/03/11 2:14:19 pm EET'\n",
            " '2024/03/11 2:14:58 pm EET' '2024/03/11 2:16:10 pm EET'\n",
            " '2024/03/11 2:17:24 pm EET' '2024/03/11 2:17:42 pm EET'\n",
            " '2024/03/11 2:19:21 pm EET' '2024/03/11 2:39:34 pm EET'\n",
            " '2024/03/11 2:49:54 pm EET' '2024/03/11 2:56:07 pm EET'\n",
            " '2024/03/11 2:59:36 pm EET' '2024/03/11 3:00:04 pm EET'\n",
            " '2024/03/11 3:08:15 pm EET' '2024/03/11 3:12:20 pm EET'\n",
            " '2024/03/11 3:52:53 pm EET' '2024/03/11 3:53:40 pm EET'\n",
            " '2024/03/11 3:55:29 pm EET' '2024/03/11 4:11:36 pm EET'\n",
            " '2024/03/11 4:16:20 pm EET' '2024/03/11 4:26:13 pm EET'\n",
            " '2024/03/11 4:40:28 pm EET' '2024/03/11 4:41:08 pm EET'\n",
            " '2024/03/11 5:11:29 pm EET' '2024/03/11 5:45:20 pm EET'\n",
            " '2024/03/11 7:41:43 pm EET' '2024/03/12 11:05:33 am EET'\n",
            " '2024/03/12 3:26:14 pm EET' '2024/03/13 10:32:27 pm EET']\n",
            "Unique values for 'Sex': ['Female' 'Male']\n",
            "Unique values for 'Matric_Avg': [76.   89.   74.   83.   80.   85.   75.   79.   72.   87.   86.   69.\n",
            " 73.   78.   84.   99.   82.6  65.   81.   88.   70.   98.   90.   98.33\n",
            " 82.   77.   68.   66.   92.   91.86 71.   63.   67.   60.   94.   95.\n",
            " 34.   86.4  95.5  91.21 96.   64.  ]\n",
            "Unique values for 'Study_Year': ['2nd Year' '1st Year' nan '3rd Year' '4th Year' 'Postgraduate']\n",
            "Unique values for 'Faculty': ['Arts & Social Sciences' 'Economic & Management Sciences' 'AgriSciences'\n",
            " 'Engineering' 'Science' 'Medicine and Health Services' 'Law' 'Education']\n",
            "Unique values for 'GPA': [72.   75.   55.   84.   52.     nan 54.   64.   76.   65.   62.   69.\n",
            " 60.   74.   70.   63.   73.   57.   90.   78.   61.   89.   80.   66.\n",
            " 58.   95.22 71.   53.   88.   79.   56.   51.   68.   50.   77.   65.89\n",
            " 73.5  59.   67.   92.   87.6  83.   30.   81.   69.7  85.  ]\n",
            "Unique values for 'Accom_Status': ['Private accommodation/ stay with family/friends' nan\n",
            " 'Non-private accommodation ie. Res']\n",
            "Unique values for 'Monthly_Allowance': ['R 4001- R 5000' 'R 7001 - R 8000' 'R 6001 - R 7000' 'R 5001 - R 6000'\n",
            " nan 'R 8000+']\n",
            "Unique values for 'Scholarship': ['No' 'Yes (NSFAS, etc...)']\n",
            "Unique values for 'Wkly_Stdy_Hrs': ['8+' '3-5' '5-8' '1-3' '0']\n",
            "Unique values for 'Socializing_Freq': ['Only weekends' '2' '3' '4+' '1' '0']\n",
            "Unique values for 'Drinks_per_Night': ['8+' '3-5' '5-8' '1-3' '0']\n",
            "Unique values for 'Missed_Classes': ['3' '4+' '2' '1' '0']\n",
            "Unique values for 'Failed_Modules': ['0' '3' '1' '4+' '2']\n",
            "Unique values for 'Relationship': ['Yes' 'No']\n",
            "Unique values for 'Approval': ['Yes' 'No']\n",
            "Unique values for 'Parent_Strength': ['Very close' 'Fair' 'Close' 'Distant']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the unique values for each variable, it seems that there are no invalid values (i.e. Multiple Representations, Incorrect Datatypes), furthermore - observations with invalid missing data have been."
      ],
      "metadata": {
        "id": "h605LX1HhpIP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stats_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l76NrIBIiXZu",
        "outputId": "6bd84d7d-a537-4554-c481-b553db63d6d0",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 382 entries, 0 to 404\n",
            "Data columns (total 17 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Timestamp          382 non-null    object \n",
            " 1   Sex                382 non-null    object \n",
            " 2   Matric_Avg         382 non-null    float64\n",
            " 3   Study_Year         321 non-null    object \n",
            " 4   Faculty            382 non-null    object \n",
            " 5   GPA                311 non-null    float64\n",
            " 6   Accom_Status       368 non-null    object \n",
            " 7   Monthly_Allowance  359 non-null    object \n",
            " 8   Scholarship        382 non-null    object \n",
            " 9   Wkly_Stdy_Hrs      382 non-null    object \n",
            " 10  Socializing_Freq   382 non-null    object \n",
            " 11  Drinks_per_Night   382 non-null    object \n",
            " 12  Missed_Classes     382 non-null    object \n",
            " 13  Failed_Modules     382 non-null    object \n",
            " 14  Relationship       382 non-null    object \n",
            " 15  Approval           382 non-null    object \n",
            " 16  Parent_Strength    382 non-null    object \n",
            "dtypes: float64(2), object(15)\n",
            "memory usage: 53.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Upon removing invalid observations with invalid NaN values, there are now 382 entries left."
      ],
      "metadata": {
        "id": "nqh4O00SiaPz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Additionally, in the variable \"Socializing_Freq\", there is a value \"Only weekends\" that is different from the rest of the options the students were to choose from, which are \"0, 1, 2, 3, 4+\" days per week. To standardize this and make it easier to analyze, the \"Only weekends\" value is replaced with a '1'."
      ],
      "metadata": {
        "id": "4Eif8zsppb16"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stats_df[\"Socializing_Freq\"] = stats_df[\"Socializing_Freq\"].replace(\"Only weekends\", \"1\")"
      ],
      "metadata": {
        "id": "H1ZhS4U3pcjN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exploratory Data Analysis**\n",
        "\n",
        "This section of the notebook performs the analysis process on the dataset in order to derive conclusions using visualization techniques. This specific dataset looks into the correlations between excessive alcohol consumption on a student's academic performance through socioeconomic factors, lifestyle choices, and external support systems."
      ],
      "metadata": {
        "id": "dLZpxrAVMSjz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 1: Does going out more means you drink more per night?"
      ],
      "metadata": {
        "id": "IXVbxk8yMcrD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crosstab = pd.crosstab(stats_df['Socializing_Freq'], stats_df['Drinks_per_Night'])\n",
        "crosstab_norm = crosstab.div(crosstab.sum(1), axis=0)\n",
        "crosstab_norm.plot(kind='bar', stacked=True)\n",
        "plt.xlabel('How Often You go out')\n",
        "plt.ylabel('Percentage')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "id": "RYspD69XBCDN",
        "outputId": "69312254-6443-485c-dad3-8a3281a6ce62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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319r1qwpseIAAACKy6E1N1988YXWrl2r6667zq69UaNG+vnnn0ukMAAAAEc4NHOTmZlpN2PzhzNnzsjb2/uaiwIAAHCUQ+GmS5cuWrp0qe29xWKR1WrViy++qG7dupVYcQAAAMXl0GmpF198UT169ND27duVk5OjZ555Rnv27NGZM2e0adOmkq4RAACgyByauWnRooUOHjyozp07q3fv3srMzNQ999yjHTt2qEGDBiVdIwAAQJE5NHMjSf7+/po4cWJJ1gIAAHDNHJq5WbJkiT788MMC7R9++KHefvvtay4KAADAUQ6Fm1mzZikgIKBAe1BQkJ5//vlrLgoAAMBRDp2WSklJUb169Qq0X3/99UpJSbnmogCYU78Yh8+Elym7XV0AgCtyaOYmKChIu3btKtD+ww8/qGbNmtdcFAAAgKMcCjcDBgzQ448/rg0bNig/P1/5+flav369nnjiCd1///0lXSMAAECROTRH/Nxzzyk5OVk9evSQh8fvH2G1WjV48GDW3AAAAJcqdrgxDEOpqamKj4/XjBkztHPnTlWqVEktW7bU9ddfXxo1AgAAFJlD4aZhw4bas2ePGjVqpEaNGpVGXQAAAA4p9pobNzc3NWrUSKdPny6NegAAAK6JQwuKZ8+eraefflo//vhjSdcDAABwTRxaUDx48GBlZWUpPDxcXl5eqlSpkt32M2fOlEhxAAAAxeVQuImNjS3hMgAAAEqGQ+FmyJAhJV0HAABAiXBozY0kHT58WJMmTdKAAQOUnp4uSfr888+1Z8+eEisOAACguBwKN1999ZVatmypLVu2aMWKFbpw4YKk3x+/MGXKlBItEAAAoDgcCjfjx4/XjBkztG7dOnl5ednau3fvru+++67EigMAACguh8LN7t27dffddxdoDwoK0qlTp665KAAAAEc5FG6qVaumEydOFGjfsWOH6tSpc81FAQAAOMqhcHP//fdr3LhxSk1NlcVikdVq1aZNmzR27FgNHjy4pGsEAAAoMofCzfPPP69mzZqpbt26unDhgpo3b66bb75ZHTt21KRJk0q6RgAAgCIr1n1urFarXnrpJX3yySfKycnRoEGD1LdvX124cEGtWrXiIZoAAMDlihVuZs6cqalTpyoqKkqVKlXSsmXLZBiGFi9eXFr1AQAAFEuxTkstXbpUCxYs0Nq1a7Vq1Sr997//1bvvviur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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looking at the stacked bar chart, we can see that the more a person goes out, the more likely they are to drink more often. In the 0 category of How often you go out, majority of the sample there doesn't drink when they go out. Compare this to the people who go out often that drink more than 5 drinks. We can verify this with a chi-square test of independence."
      ],
      "metadata": {
        "id": "chO7WATCE6xr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "chi2, p, dof, expected = chi2_contingency(crosstab)\n",
        "\n",
        "print(\"Chi-square statistic:\", chi2)\n",
        "print(\"P-value:\", p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OAQUHp8yDa3g",
        "outputId": "80d29e47-9624-4995-dfe4-5b2268a21c33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-square statistic: 93.38507798157153\n",
            "P-value: 5.925257207618277e-13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since the chi-square statistic is high p-value is low, there seems to be a strong association with the two variables."
      ],
      "metadata": {
        "id": "35LKSIjwDbYn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 2: Does Weekly Study Hours affect GPA"
      ],
      "metadata": {
        "id": "kR8Uf2MdFTPB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "To see whether drinking does help improve students' grades or if it's actually just studying, let's check the weekly study hours first.\n",
        "\n",
        "First, let's separate the data with GPA and those that don't (frosh) to be able to compare GPA among different groups."
      ],
      "metadata": {
        "id": "BcZLy2zHdo6-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "frosh_df = stats_df[stats_df[\"GPA\"].isna()]\n",
        "sophomore_and_above_df = stats_df[~stats_df.index.isin(frosh_df.index)]"
      ],
      "metadata": {
        "id": "mVxwe0ydUf1u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sophomore_and_above_df.boxplot('GPA', by='Wkly_Stdy_Hrs')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "2rCWOHDuI0Ls",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "outputId": "17a48d3f-c42d-4b5d-ed11-6896691f27d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "study_freq = sophomore_and_above_df.groupby('Wkly_Stdy_Hrs').agg({'GPA': ['mean','median', 'std']})\n",
        "study_freq.sort_values([('GPA', 'mean')], ascending=False, inplace=True)\n",
        "print(study_freq)"
      ],
      "metadata": {
        "id": "ggP1mKJsKtIh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f9f4413-49af-4adf-92fc-8df122725999"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                     GPA                  \n",
            "                    mean median        std\n",
            "Wkly_Stdy_Hrs                             \n",
            "0              67.705882   69.0  11.038369\n",
            "8+             67.339053   65.0   9.018474\n",
            "1-3            66.746032   65.0  10.237452\n",
            "5-8            66.280952   65.0   8.733249\n",
            "3-5            64.986301   64.0   8.278978\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the boxplot and the summary statistics, there seems to be no correlation between the students' GPA and the weekly study hours for this population."
      ],
      "metadata": {
        "id": "qo54Dg1ILw59"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 3: Does how much you drink affect GPA?"
      ],
      "metadata": {
        "id": "YUvILV3BIlvr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since there is already a strong association between how often a person goes out and how much they drink that night, we can use **`Socializing_Freq`** as a metric for how much, generally, a person drinks and gets drunk."
      ],
      "metadata": {
        "id": "sOS_E8W_HAYM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sophomore_and_above_df.boxplot('GPA', by='Socializing_Freq')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "tJDOItCjHeEh",
        "outputId": "744c766c-f366-4318-e8b1-ef108cc1b106"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "study_freq = sophomore_and_above_df.groupby('Socializing_Freq').agg({'GPA': ['mean','median', 'std']})\n",
        "study_freq.sort_values([('GPA', 'mean')], ascending=False, inplace=True)\n",
        "print(study_freq)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "94BbvDlMPO9V",
        "outputId": "abe492bf-e605-49f1-c150-7c8fd441385a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        GPA                  \n",
            "                       mean median        std\n",
            "Socializing_Freq                             \n",
            "3                 67.993878   68.0   8.247333\n",
            "0                 67.324167   65.0   9.774601\n",
            "2                 67.000000   65.0   8.498162\n",
            "1                 65.955349   64.0   9.328406\n",
            "4+                64.153846   65.0  12.740004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Similar to weekly study hours, there seems to be no correlation between how much a person drinks and their GPA."
      ],
      "metadata": {
        "id": "Fxhod0byP2Pf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 4: Does drinking more cause students to fail more modules?"
      ],
      "metadata": {
        "id": "jRe0PhQ5SHlO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " To further investigate whether or not consuming alcohol causes a student to fail more modules, we can use another metric of performance which is their completion of modules."
      ],
      "metadata": {
        "id": "kVhK-la2SenX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crosstab = pd.crosstab(stats_df['Socializing_Freq'], stats_df['Failed_Modules'])\n",
        "crosstab_norm = crosstab.div(crosstab.sum(1), axis=0)\n",
        "crosstab_norm.plot(kind='bar', stacked=True)\n",
        "plt.xlabel('How Often You go out')\n",
        "plt.ylabel('Percentage')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jLYTM4z9P10u",
        "outputId": "8876ca2e-6ccb-47dd-f21c-c02f693cd14d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looking at the stacked bar chart, there doesn't seem to be a strong correlation between the two as the ratio of failed modues largely stays the same even at both ends of the spectrum of how much they go out."
      ],
      "metadata": {
        "id": "o4eoKDtHTEHs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "chi2, p, dof, expected = chi2_contingency(crosstab)\n",
        "\n",
        "print(\"Chi-square statistic:\", chi2)\n",
        "print(\"P-value:\", p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H9vFD9YdTCHq",
        "outputId": "c5eb9a4c-2f4b-43c4-9c09-001b4ad2a30b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-square statistic: 19.732117675581254\n",
            "P-value: 0.23252902910270512\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is further supported by the p-value of the chi-square test being more than 0.05."
      ],
      "metadata": {
        "id": "N226mBt3TBb_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Research Question**"
      ],
      "metadata": {
        "id": "gwcm1NWlmajg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This can be approached by exploring the dataset and making mathematical inferences using Two-way ANOVA to test whether two set of variables (namely one's current year and alcohol consumption) affect an independent variable (academic performance).\n",
        "\n",
        "Or alternatively, using association rule mining which explores how well related certain combinations of features are, we can also check the confidence behind the question of whether **Does one's senior year level and strong parental support lead to approval in drinking?** and other possible variations brought upon by association rule learning using this data set.\n",
        "\n"
      ],
      "metadata": {
        "id": "aaCLc7aTrqyE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Modeling**"
      ],
      "metadata": {
        "id": "_lwQpSrQmfIu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing\n"
      ],
      "metadata": {
        "id": "ZmkU_2d-Hjnt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we are using Association Rule Mining to get insights on which variables are associated and Chi-Square Test of Independence to compare the association of each categorical variable, the frequencies of each category should be checked to ensure that no one category is too sparse."
      ],
      "metadata": {
        "id": "NiTdWFgVCXbh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped = stats_df.dropna(subset=['Study_Year'])\n",
        "print(dropped['Study_Year'].value_counts(),'\\n')\n",
        "print(dropped['Parent_Strength'].value_counts(),'\\n')\n",
        "print(dropped['Approval'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PMgksMbpCLqx",
        "outputId": "1bc5614a-f8d9-49d2-c913-1243aed4845d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Study_Year\n",
            "2nd Year        148\n",
            "1st Year        122\n",
            "3rd Year         39\n",
            "4th Year          7\n",
            "Postgraduate      5\n",
            "Name: count, dtype: int64 \n",
            "\n",
            "Parent_Strength\n",
            "Very close    212\n",
            "Close          76\n",
            "Fair           31\n",
            "Distant         2\n",
            "Name: count, dtype: int64 \n",
            "\n",
            "Approval\n",
            "Yes    278\n",
            "No      43\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since the frequencies of 4th Year and Postgraduate in Study_Year and Distant and Fair in Parent_Strength is too low, we can group these categories into one instead since they are adjacent in ordinal ordering."
      ],
      "metadata": {
        "id": "yi4eEYSnDX7Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped['Parent_Strength'] = dropped['Parent_Strength'].replace(['Fair', 'Distant'], 'Fair and Distant')\n",
        "dropped['Study_Year'] = dropped['Study_Year'].replace(['3rd Year', '4th Year', 'Postgraduate'], '3rd Year and Above')\n",
        "\n",
        "print(dropped['Study_Year'].value_counts(),'\\n')\n",
        "print(dropped['Parent_Strength'].value_counts(),'\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S0C0S0U1ElC4",
        "outputId": "80b4e604-0ce8-4765-9733-4c2ae28ff34f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Study_Year\n",
            "2nd Year              148\n",
            "1st Year              122\n",
            "3rd Year and Above     51\n",
            "Name: count, dtype: int64 \n",
            "\n",
            "Parent_Strength\n",
            "Very close          212\n",
            "Close                76\n",
            "Fair and Distant     33\n",
            "Name: count, dtype: int64 \n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-50-d5257cd23260>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  dropped['Parent_Strength'] = dropped['Parent_Strength'].replace(['Fair', 'Distant'], 'Fair and Distant')\n",
            "<ipython-input-50-d5257cd23260>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  dropped['Study_Year'] = dropped['Study_Year'].replace(['3rd Year', '4th Year', 'Postgraduate'], '3rd Year and Above')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To do association rule mining using the apriori algorithm, we would need to take the three variables/columns and combine them into array, so that the algorithm can see it as a basket."
      ],
      "metadata": {
        "id": "vKmDku7ct7Un"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns_of_interest = dropped[['Parent_Strength', 'Study_Year', 'Approval']]\n",
        "series_of_arrays = columns_of_interest.apply(lambda row: row.values, axis=1)\n",
        "columns_of_interest.head()"
      ],
      "metadata": {
        "id": "me-3kyxfIrJL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "683a6289-0fde-4306-a311-19919e8bc0da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Parent_Strength Study_Year Approval\n",
              "0        Very close   2nd Year      Yes\n",
              "1        Very close   2nd Year      Yes\n",
              "2        Very close   1st Year      Yes\n",
              "3        Very close   2nd Year      Yes\n",
              "4  Fair and Distant   2nd Year      Yes"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-422f3bf9-3ba4-4cae-acb1-8715666e12ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Parent_Strength</th>\n",
              "      <th>Study_Year</th>\n",
              "      <th>Approval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Very close</td>\n",
              "      <td>2nd Year</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Very close</td>\n",
              "      <td>2nd Year</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Very close</td>\n",
              "      <td>1st Year</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Very close</td>\n",
              "      <td>2nd Year</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Fair and Distant</td>\n",
              "      <td>2nd Year</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-422f3bf9-3ba4-4cae-acb1-8715666e12ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-422f3bf9-3ba4-4cae-acb1-8715666e12ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-422f3bf9-3ba4-4cae-acb1-8715666e12ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-86b099ab-f7a9-4dec-b080-915d707ce4df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86b099ab-f7a9-4dec-b080-915d707ce4df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-86b099ab-f7a9-4dec-b080-915d707ce4df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "columns_of_interest",
              "summary": "{\n  \"name\": \"columns_of_interest\",\n  \"rows\": 321,\n  \"fields\": [\n    {\n      \"column\": \"Parent_Strength\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Very close\",\n          \"Fair and Distant\",\n          \"Close\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Study_Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2nd Year\",\n          \"1st Year\",\n          \"3rd Year and Above\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Approval\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We then take this series of lists and perform one-hot encoding to represent it as a matrix"
      ],
      "metadata": {
        "id": "sGzHiSkxwDQ8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "unique_categories = [\n",
        "    'Very close', 'Close', 'Fair and Distant', 'Yes', 'No',\n",
        "    '1st Year', '2nd Year', '3rd Year and Above'\n",
        "]\n",
        "\n",
        "def one_hot_encode(array, categories):\n",
        "    one_hot = pd.Series(array).apply(lambda x: pd.Series([1 if x == cat else 0 for cat in categories], index=categories))\n",
        "    return one_hot.sum(axis=0)\n",
        "\n",
        "# Apply one-hot encoding to each array in the series and concatenate the results\n",
        "one_hot_encoded_df = series_of_arrays.apply(lambda x: one_hot_encode(x, unique_categories))\n",
        "one_hot_encoded_df.head()"
      ],
      "metadata": {
        "id": "bDMVxyIgwPSs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "21710d1a-1aff-4086-b45e-8980bf2f40de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Very close  Close  Fair and Distant  Yes  No  1st Year  2nd Year  \\\n",
              "0           1      0                 0    1   0         0         1   \n",
              "1           1      0                 0    1   0         0         1   \n",
              "2           1      0                 0    1   0         1         0   \n",
              "3           1      0                 0    1   0         0         1   \n",
              "4           0      0                 1    1   0         0         1   \n",
              "\n",
              "   3rd Year and Above  \n",
              "0                   0  \n",
              "1                   0  \n",
              "2                   0  \n",
              "3                   0  \n",
              "4                   0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50ea542b-a22e-4b3d-9ba3-2bfd74dce101\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Very close</th>\n",
              "      <th>Close</th>\n",
              "      <th>Fair and Distant</th>\n",
              "      <th>Yes</th>\n",
              "      <th>No</th>\n",
              "      <th>1st Year</th>\n",
              "      <th>2nd Year</th>\n",
              "      <th>3rd Year and Above</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50ea542b-a22e-4b3d-9ba3-2bfd74dce101')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50ea542b-a22e-4b3d-9ba3-2bfd74dce101 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50ea542b-a22e-4b3d-9ba3-2bfd74dce101');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a57959d0-95ce-4b92-8cc4-a473bba6d8df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a57959d0-95ce-4b92-8cc4-a473bba6d8df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a57959d0-95ce-4b92-8cc4-a473bba6d8df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "one_hot_encoded_df",
              "summary": "{\n  \"name\": \"one_hot_encoded_df\",\n  \"rows\": 321,\n  \"fields\": [\n    {\n      \"column\": \"Very close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fair and Distant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1st Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2nd Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3rd Year and Above\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Apriori Algorithm\n",
        "\n",
        "After performing the necessary preprocessing operations, we now proceed to use the Apriori Algorithm in order to gain further insight on the relationships between the students' year level, parental strength, and parental approval."
      ],
      "metadata": {
        "id": "8btfyWEetwDz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append('/content/drive/MyDrive/')\n",
        "from rule_miner import *\n",
        "\n",
        "support_t = 25;\n",
        "confidence_t = 0.85;\n",
        "\n",
        "ruleminer = RuleMiner(support_t, confidence_t);\n",
        "\n",
        "rules = ruleminer.get_association_rules(one_hot_encoded_df)\n",
        "print(rules)"
      ],
      "metadata": {
        "id": "5AArgT_AgiCe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "562f2915-ceb7-416b-9665-55ba6c1ad3b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[['1st Year', 'Very close'], ['Yes']], [['2nd Year', 'Very close'], ['Yes']], [['3rd Year and Above', 'Very close'], ['Yes']]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "With an 85% threshold that the combination of year level and degree of closeness leads to an approval of the parents with regard to their child's drinking, we were able to narrow down the associative rule mining's 'Yes'-leaning itemsets to the following combinations:\n",
        "\n",
        "* 1st Year & Very Close\n",
        "* 2nd Year & Very Close\n",
        "* 3rd Year and Above & Very Close\n",
        "\n",
        "Having narrowed down the itemsets to the aforementioned combinations, there is significant data to insinuate that a **very close parental support** strength often leads to their approval of their child's drinking habits. This is also true for students **regardless of which level** they are from.\n",
        "\n",
        "It is also worth noting that, given the thresholds specified in the code (at least 25 support and 85% confidence), there are no **persisting itemsets** that support that the **disapproval of the parents** considering the student's year level and strength of parental support."
      ],
      "metadata": {
        "id": "nfR9SXsk-W1X"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Statistical Inference**"
      ],
      "metadata": {
        "id": "PVZlmav203-a"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Chi-square Test of Independence\n",
        "\n",
        "A test of independence was conducted to check how the categories of student year level, parental support would relate to how the parents approve of their child’s drinking choices (pertaining to alcoholic beverages).\n",
        "\n",
        "This test of independence was chosen as it fits the criteria of using categorical values instead of numerical. As such, chi-square test of independence makes it so that the data are tested with the expected results, and thus, checks if there is a valid association between the two categories being tested.\n",
        "\n",
        "The two relationships being tested are as follows:\n",
        "* Parents Approval and Student Year Level\n",
        "* Parents Approval and Parental Support\n"
      ],
      "metadata": {
        "id": "3LUWd6RqUpsK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Parent Relationship Strength and Parent Approval\n",
        "\n",
        "To further inspect if the variables `Parent_Strength`, `Study_Year`, and `Approval`, and are truly related or independent of each other.\n",
        "\n",
        "For this test, we used Pearson's Chi-Squared Test. For this test, the significance level is set at 5% (0.05). We also define the following:\n",
        "\n",
        "**Null Hypothesis: How strong their relationship with their parent is independent of their parent's approval of them drinking.**\n",
        "\n",
        "**Alternative Hypothesis: How strong their relationship with their parent is associated with their parent's approval of them drinking.**"
      ],
      "metadata": {
        "id": "qe9BuEbTAKKt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crosstab = pd.crosstab(columns_of_interest['Parent_Strength'], columns_of_interest['Approval'])\n",
        "\n",
        "chi2, p, dof, expected = chi2_contingency(crosstab)\n",
        "V = np.sqrt(chi2 / (columns_of_interest.shape[0] * (min(crosstab.shape)-1)))\n",
        "print('Chi-Square: {:.4f}'.format(chi2))\n",
        "print('p-value: ', p)\n",
        "print('DOF: ', dof)\n",
        "print(\"Cramer's V: {:.3f}\".format(V))\n",
        "print('Expected:\\n', expected)\n",
        "print('Crosstab:\\n', crosstab)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Vj36Bt4ANfC",
        "outputId": "4cd5835b-abd8-472c-9f4d-6ee96b0879c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-Square: 11.7038\n",
            "p-value:  0.0028744913901971847\n",
            "DOF:  2\n",
            "Cramer's V: 0.191\n",
            "Expected:\n",
            " [[ 10.18068536  65.81931464]\n",
            " [  4.42056075  28.57943925]\n",
            " [ 28.39875389 183.60124611]]\n",
            "Crosstab:\n",
            " Approval          No  Yes\n",
            "Parent_Strength          \n",
            "Close             15   61\n",
            "Fair and Distant   9   24\n",
            "Very close        19  193\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the results, it was found that `Parent_Strength` and `Approval` are related. This is because the p-value (0.003) yielded by the test is lower than the significance level of 0.05, therefore, **rejecting the null hypothesis.** We can also see that the association is weak using Cramer's V, which ranges from 0 to 1 and 1 being perfectly associated."
      ],
      "metadata": {
        "id": "i1E6J4m3CtzW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Year Level and Parent Approval\n",
        "\n",
        "The next test compares the variables `Study_Year` and `Approval`. For this test, the significance level is also set at 5% (0.05). We also define the following:\n",
        "\n",
        "**Null Hypothesis: Their current year level is independent of their parent's approval of them drinking.**\n",
        "\n",
        "**Alternative Hypothesis: Their current year level is associated with their parent's approval of them drinking.**"
      ],
      "metadata": {
        "id": "9k5-033iobRL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crosstab = pd.crosstab(columns_of_interest['Study_Year'], columns_of_interest['Approval'])\n",
        "\n",
        "chi2, p, dof, expected = chi2_contingency(crosstab)\n",
        "V = np.sqrt(chi2 / (columns_of_interest.shape[0] * (min(crosstab.shape)-1)))\n",
        "print('Chi-Square: {:.4f}'.format(chi2))\n",
        "print('p-value: ', p)\n",
        "print('DOF: ', dof)\n",
        "print(\"Cramer's V: {:.3f}\".format(V))\n",
        "print('Expected:\\n', expected)\n",
        "print('Crosstab:\\n', crosstab)"
      ],
      "metadata": {
        "id": "PKqIq-0CCmnr",
        "outputId": "ae499cb2-940f-488b-d4ab-b87ed0d4cfea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-Square: 0.7630\n",
            "p-value:  0.6828520902390014\n",
            "DOF:  2\n",
            "Cramer's V: 0.049\n",
            "Expected:\n",
            " [[ 16.34267913 105.65732087]\n",
            " [ 19.82554517 128.17445483]\n",
            " [  6.8317757   44.1682243 ]]\n",
            "Crosstab:\n",
            " Approval            No  Yes\n",
            "Study_Year                 \n",
            "1st Year            18  104\n",
            "2nd Year            20  128\n",
            "3rd Year and Above   5   46\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unlike the first test, there is no association between variables `Study_Year` and `Approval` because the p-value (0.68) **failed to reject the null hypothesis**, as it yielded a value higher than the signficance level."
      ],
      "metadata": {
        "id": "tPq2B7WOGM1X"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given that the **Parent Approval** and **Student Year** level are associated, while the **Parent Approval** and **Parental Support Strength** are not, this does not give us an outright view of how both categories can relate to the parent approval. This is one more reason to pursue **Association Rule Mining** as a way to gather conclusive info as to how the three categories interplay or relate, particularly how the combination of senior year level and strong parental support leads to parental approval in drinking."
      ],
      "metadata": {
        "id": "g6ZyiBQBUzlj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Conclusion**"
      ],
      "metadata": {
        "id": "kO2LI10ejZNc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The most prominent research question arising from the dataset is one involving **parental support strength** and **student year level** in determining the **parents' approval** in their child's drinking habits. There is a significant push to study this research question from previous data visualization and initial hypothesis testing leaning towards **associating drinking and student performance**, which begs the question of **whether the parents approve of these habits and for which reasons?**\n",
        "\n",
        "Given this research question, the group has started working on the possibility of using association rule mining to establish and explore the following arguments:\n",
        "* Does a **strong parental support** lead to parental approval in drinking?\n",
        "* Does belonging to a **senior year level** lead to parental approval in drinking?\n",
        "* When combined, how do the implications of **senior year level and strong parental support** interplay?\n",
        "\n",
        "Using the association rule mining techniques we have processed the data through, we were able to determine 3 itemsets that are frequently occuring with at least 25 occurences of the set, and established a confidence of 85% that year level (1st, 2nd, 3and above) and parental support (Weak, Strong, Very Strong) leads to approval (Yes/No). We also noticed that \"very close\" parental relationship is one of the antecedents across all year levels, which really puts the parental support strength at the forefront of the determining factor at face value of the dataset that supports this information.\n",
        "\n",
        "To reiterate, the persisting itemsets are as follows:\n",
        "* 1st Year & Very Close\n",
        "* 2nd Year & Very Close\n",
        "* 3rd Year and Above & Very Close\n",
        "All of which led to parental approval.\n",
        "\n",
        "In more technical interpretation, this answers the research question by confirming that a **senior year level and very strong parental support leads to drinking approval**, however, it does not single out very strong parental support as the only key factor that arrives to this causality, nor does the year level also affect drinking approval when considered on its own.\n",
        "\n",
        "Still, it opens the possibility of opening research questions centered on parental support on the student, as it seems to be a driving factor that  leads to drinking approval across **all year levels**.\n",
        "\n",
        "To supplement the findings of the association rule mining technique used, the chi-square test of independence also shows that there is indeed no association between approval and student year level, but there is association between parental support and approval. This further drives the point that the approval for drinking largely depends on parental support strength.\n",
        "\n",
        "In future iteration of this research, the impact of other aspects like GWA and Attendance in class to further inspect how alcoholism can affect student performance on a much deeper level, and influenced by other factors.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "5ErZusij0yis"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **References**"
      ],
      "metadata": {
        "id": "fIupHg6XjfxM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "GeeksforGeeks. (2023, February 1). SciPY Stats. GeeksforGeeks. https://www.geeksforgeeks.org/scipy-stats/\n",
        "\n",
        "GeeksforGeeks. (2023b, May 23). Introduction to Seaborn Python. GeeksforGeeks. https://www.geeksforgeeks.org/introduction-to-seaborn-python/\n",
        "\n",
        "Naudé, J. (2024, May 13). Joshua Naudé on LinkedIn: Alcohol, Lifestyle & Academic Success at University | 27 comments. https://www.linkedin.com/posts/joshuanaude_alcohol-lifestyle-academic-success-at-activity-7195694264322842624-R1DP?fbclid=IwAR2jZvyEdh7ECw7k0m5qWcgWTmPGxPYZ2_V5cVViLrHRdsHIR3bBI3lRrao\n",
        "\n",
        "Suhani, S. (2024, January 24). What is Pandas in Python? Everything you need to know. ActiveState. https://www.activestate.com/resources/quick-reads/what-is-pandas-in-python-everything-you-need-to-know/\n",
        "\n",
        "W3Schools.com. (n.d.). https://www.w3schools.com/python/numpy/numpy_intro.asp\n",
        "\n"
      ],
      "metadata": {
        "id": "7dqOdAuIMxIn"
      }
    }
  ]
}
